name: Rails Tests

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  test:
    runs-on: ubuntu-latest

    # Set up a PostgreSQL service for the test environment
    services:
      postgres:
        image: postgres:15-alpine
        ports:
          - "5432:5432"
        env:
          POSTGRES_DB: tachyon_test # Matches your config/database.yml test database name
          POSTGRES_USER: runner # A user for the CI environment
          POSTGRES_PASSWORD: '' # No password needed for local CI test DB
        options: >- # Health check to ensure PostgreSQL is ready
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    env:
      RAILS_ENV: test
      CI: true

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: 3.3.0
        bundler-cache: true

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 20
        cache: 'npm'

    - name: Configure PostgreSQL client libraries
      # Required to build the `pg` gem
      run: |
        sudo apt-get update
        sudo apt-get install -y libpq-dev

    - name: Wait for PostgreSQL service
      # This step ensures the database is fully ready before Rails tries to connect.
      # The `services` health check typically handles this, but an explicit wait
      # can prevent race conditions on some runners.
      run: |
        echo "Waiting for PostgreSQL..."
        for i in $(seq 1 10); do
          if PGPASSWORD='' psql -h localhost -U runner -d tachyon_test -c "select 1" > /dev/null 2>&1; then
            echo "PostgreSQL is ready!"
            exit 0
          fi
          echo "Still waiting for PostgreSQL..."
          sleep 1
        done
        echo "PostgreSQL did not become ready within the timeout."
        exit 1

    - name: Modify database.yml for CI (Optional, but ensures correct connection)
      # This step modifies the database.yml to explicitly connect to the service
      # PostgreSQL instance.
      run: |
        sed -i 's/database: tachyon_development/database: tachyon_test/' config/database.yml
        sed -i 's/#username: tachyon/username: runner/' config/database.yml
        sed -i 's/#password:/password: /' config/database.yml
        cat config/database.yml

    - name: Database setup
      run: |
        bin/rails db:create
        bin/rails db:schema:load

    - name: Run RSpec tests
      run: |
        bundle exec rspec
